<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jesse Janzer</title>
    <link>https://stunlock.gg/posts/</link>
    <description>Recent content in Posts on Jesse Janzer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 22 Mar 2025 13:32:18 -0600</lastBuildDate><atom:link href="https://stunlock.gg/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cloning Windows Drives</title>
      <link>https://stunlock.gg/posts/cloning_windows_drives/</link>
      <pubDate>Sat, 22 Mar 2025 13:32:18 -0600</pubDate>
      
      <guid>https://stunlock.gg/posts/cloning_windows_drives/</guid>
      <description>TLDR Use clonezilla but don&amp;rsquo;t proportionally copy, do a 1-for-1 disk to disk copy Use gparted to move the partitions to the very end of the disk that follow after your C drive Boot into windows and use the disk management utility to expand the C drive The Problem I recently needed to migrate a drive from a 512GB SSD running windows 10 to a larger 2TB drive. I&amp;rsquo;ve done this in the past plenty of times with Clonezilla but I ran into a problem this time.</description>
    </item>
    
    <item>
      <title>Emscripten with CMake</title>
      <link>https://stunlock.gg/posts/emscripten_with_cmake/</link>
      <pubDate>Sat, 16 Jul 2022 15:30:05 -0600</pubDate>
      
      <guid>https://stunlock.gg/posts/emscripten_with_cmake/</guid>
      <description>TLDR: If you just want a quick solution.
Emscripten is a pretty powerful tool for porting C and C++ to JavaScript. It does this through clang which can compile to WebAssembly, Wasm, and it&amp;rsquo;s own suite of libraries for making things &amp;ldquo;just work&amp;rdquo;. It&amp;rsquo;s fairly straightforward and mostly a drop in replacement for your standard compiler with some exceptions (eg: threads). Dropping it into an existing CMake project, however, isn&amp;rsquo;t as straightforward.</description>
    </item>
    
    <item>
      <title>Working with procedural meshes in Assimp</title>
      <link>https://stunlock.gg/posts/assimp/</link>
      <pubDate>Sat, 11 Dec 2021 10:18:00 -0600</pubDate>
      
      <guid>https://stunlock.gg/posts/assimp/</guid>
      <description>Assimp or Open Asset Import Library is a really nice library for handling lots of various 3D model formats such as OBJ, glTF, and FBX. It can both import and export many formats.
I wanted to make a short guide on some of the more tricky things to do or less well documented parts of the library such as procedural meshes (such as making meshes from another system and wanting to export them using assimp).</description>
    </item>
    
    <item>
      <title>An Introduction to Practical 3D Math for Programmers</title>
      <link>https://stunlock.gg/posts/linear_algebra/</link>
      <pubDate>Mon, 11 Oct 2021 08:41:57 -0600</pubDate>
      
      <guid>https://stunlock.gg/posts/linear_algebra/</guid>
      <description>## Preface There are a lot of guides for 3D math that seem to be written by people quite good at math. If instead you&#39;re like me and better at programming than math this is the guide I wish I had when I first started learning OpenGL, Direct3D, Shaders, Unity, and Unreal. I struggled a lot reading other people&#39;s guides, white papers, thesis documents, books, and videos. It felt like everyone was speaking a language I didn&#39;t know.</description>
    </item>
    
    <item>
      <title>Managed and Unmanaged Library Interfaces with IL2CPP in Unity</title>
      <link>https://stunlock.gg/posts/il2cpp_dynamic_linker_errors/</link>
      <pubDate>Sun, 10 Oct 2021 17:04:28 -0600</pubDate>
      
      <guid>https://stunlock.gg/posts/il2cpp_dynamic_linker_errors/</guid>
      <description>The Problem with Precompiled Managed Libraries in Unity I work on an SDK that has a non-platform specific compiled managed C# library along with unmanaged C++ libaries. There are peculirarirties with iOS/tvOS/watchOS where you will want to use a static library as using a dynamic library is not officially supported by Apple like other platforms (Windows, Linux, macOS, Android). So far we&amp;rsquo;ve avoided having loose C# helper scripts alongside our managed C# dll and also we&amp;rsquo;ve avoided having different managed dlls for each platform.</description>
    </item>
    
    <item>
      <title>Rendering Offscreen with Filament using Render Targets</title>
      <link>https://stunlock.gg/posts/filament_offscreen_renderering/</link>
      <pubDate>Wed, 06 Oct 2021 22:13:11 -0600</pubDate>
      
      <guid>https://stunlock.gg/posts/filament_offscreen_renderering/</guid>
      <description>I was making a small application for viewing 3D asets and wanted to use Google&amp;rsquo;s Filament renderer. It&amp;rsquo;s not too hard to get started with this, but I was already using my own OpenGL context and didn&amp;rsquo;t want to yield full control over to Filament. Instead I wanted to render the model on an offscreen buffer and then display it on my main window. Surprisingly this is quite difficult to figure out how and the documentation and examples don&amp;rsquo;t cover this case well.</description>
    </item>
    
  </channel>
</rss>
